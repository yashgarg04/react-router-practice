{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","CommentItem","item","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedComentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.c0e6ad45.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__9NuKY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3CXOS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__NwyLG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1gL1u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Jr3S\",\"loading\":\"NewCommentForm_loading__22mbz\",\"control\":\"NewCommentForm_control__1VTzQ\",\"actions\":\"NewCommentForm_actions__1YcN3\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const {onAddedComment} = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest( { commentData: {text: enteredText}, quoteId: props.quoteId } );\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n    {status === 'pending' && <div className='centered'>\n      <LoadingSpinner />\n    </div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const {sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect( () => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId] );\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedComentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = <div className='centered'><LoadingSpinner /></div>\n  }\n\n  if (status === 'completed' && (loadedComments && loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>No comments were added yet!!</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedComentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\r\nimport { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\n\r\nimport Comments from '../components/comments/Comments';\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n    const match = useRouteMatch();\r\n    const params = useParams();\r\n\r\n    const { quoteId } = params;\r\n\r\n    const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\r\n\r\n    useEffect( () => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId] );\r\n\r\n    if (status === 'pending') {\r\n        return <div className=\"centered\">\r\n            <LoadingSpinner />\r\n        </div>\r\n    }\r\n\r\n    if (error) {\r\n        return <p className=\"centered focused\">\r\n            {error}\r\n        </p>\r\n    }\r\n\r\n    if (!loadedQuote.text) {\r\n        return <p>No quote found !</p>\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n            <Route path={match.path} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>Load Comments</Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}